require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe StoriesController do

  # This should return the minimal set of attributes required to create a valid
  # Story. As you add validations to Story, be sure to
  # adjust the attributes here as well.

  let(:project) { create(:project)}
  let(:stack) { create(:stack, project: project)}

  let(:valid_attributes){ params_for(:story).merge(stack_id: stack) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StoriesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    let!(:stories) {create_list(:story, 2, stack: stack)}
    before(:each) do
      xhr :get, :index, ids: stories.map(&:to_param)
    end

    specify { expect(assigns(:stories)).to eq(stories) }
    it { should respond_with(:success) }
  end

  describe '#show' do
    let(:story){create(:story, stack: stack)}
    before(:each) do
      xhr :get, :show, id: story.to_param
    end

    specify { expect(assigns(:story)).to eq(story) }
    it { should respond_with(:success) }
  end

  describe "#create" do
    let!(:count) { stack.stories.count }

    describe 'with valid params' do
      before(:each) do
        xhr :post, :create,  story: valid_attributes
      end

      specify { expect(assigns(:story)).to be_persisted }
      specify { expect(assigns(:story)).to be_a(Story) }

      specify { expect(stack.stories.count).to eq(count + 1) }

      it { should respond_with(:created) }
    end
    describe 'with invalid params' do
      before(:each) do
        Story.any_instance.stub(:save).and_return(false)
        xhr :post, :create,  story: valid_attributes
      end

      specify { expect(assigns(:story)).to_not be_persisted }
      specify { expect(assigns(:story)).to be_a(Story) }

      specify { expect(stack.stories.count).to eq(count) }

      it { should respond_with(:unprocessable_entity) }
    end
  end

  describe '#update' do

    let!(:story){create(:story, stack: stack)}

    describe 'with valid params' do
      before(:each) do
        xhr :put, :update,  id: story.to_param, story: valid_attributes
      end
      specify { expect(assigns(:story)).to eq(story) }

      it { should respond_with(:no_content) }
    end

    describe 'with invalid params' do
      before(:each) do
        Story.any_instance.stub(:save).and_return(false)
        xhr :put, :update,  id: story.to_param, story: valid_attributes
      end
      specify { expect(assigns(:story)).to eq(story) }

      it { should respond_with(:unprocessable_entity) }
    end

    describe '#destroy' do
      let!(:story){create(:story, stack: stack)}
      let!(:count) { stack.stories.count }

      before(:each) do
        xhr :delete, :destroy,  id: story.to_param
      end

      specify { expect(stack.stories.count).to eq(count - 1) }

      it { should respond_with(:no_content) }
    end
  end
end
